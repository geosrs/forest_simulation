
%model based on http://www.sciencedirect.com/science/article/pii/S0304380099000903
%CONSTANTS
dt = 1; %timestep
simulationLength = 10; %simulation length
numIterations = simulationLength/dt; % number of iterations
times = zeros(1,numIterations); %timesteps for graphing

%VARIABLES

%size of forest in cells = m x n
m = 25; 
n = 25;
R = 6; %neighborhood radius meters
s_cell = 2; %size cell in meters
centerDistance = fix(R/s_cell); %max radial neighborhood distance
%initialize forest and extended grid
forest(1:m,1:n) = forest_cell;
extGrid((m + 2 * centerDistance),(n + 2 * centerDistance)) = forest_cell;
% extended grid, including boundary  conditions
% forestList = cell(numIterations);
% forestList{1} = forest;
extGridList = cell(numIterations);
extGridList{1} = extGrid;

radialMask = zeros(2*centerDistance + 1, 2*centerDistance + 1);
for i = -centerDistance:centerDistance
        for j = -centerDistance:centerDistance
            %if cooridinate is within R of center
            if (i ~= 2*centerDistance + 1) && (j ~= 2*centerDistance + 1) %cell is not in its own neighborhood
                if i^2 + j^2 <= R^2/s_cell^2
                    %add to neighbors list
                    neighbors = [neighbors, extgrid(x + i, y + j)];
                end
            end
        end
    end 
% radial neighbor func
% input: x,y, coordinates of grid element
%        extGrid - current extended grid
% output: array of neighborhood elements within R of x,y
radialNeighbors = @(x, y, extGrid) (findRadialNeighbors(x, y, extGrid, R, s_cell));

%Optimal growth of a tree without constraining factors
optimalGrowth = @(tree) ((tree.G * tree.D * ...
         (1 - (tree.D * tree.H)/(tree.Dmax * tree.Hmax)))...
         /(247 + 3 * tree.b2 * tree.D - 4 * tree.b3 * tree.D^2));

AL0 = 1; %light incident above canopy ??????????
%http://link.springer.com/article/10.1007%2Fs11707-014-0446-7
k = .56; %light extinction coefficient

availableLight = @(tree, neighbors) (findAvailableLight(tree,neighbors, AL0,k));
%the average amount of an area occupied by tree stems.
%It is defined as the total cross-sectional area of all stems in a stand measured at
%breast height, and expressed as per unit of land area
totalBasalArea = @(neighborTrees) (findTotalBasalArea(neighborTrees));

%calculates shade response based tolerance of tree
shadeResponse = @(tree, AL) (findShadeResponse(tree,AL));
BARmax = 250; %maximum basal area unsure what this should be????
spaceResponse = @(BAR) (1 - BAR/BARmax); %


ageDeathFraction = .01; %fraction of trees to reach species dependent maximum age
deathProbability = @(tree) (log(ageDeathFraction)/tree.AGEmax);

competitionDeathFraction = .001; 
AINC = .0001; %minimum D increment to not have a chance
                                            % of death
competitiveDeathProbability = 1 - competitionDeathFraction^(1/10); 


shouldKillTree = @(tree, changeInD,rand1,rand2) ((rand1 < deathProbability(tree))...
    || (changeInD < AINC && rand2 < competitiveDeathProbability));  



shouldAddTree = @(tree, AL) (tree.ALmin <= AL && AL <= tree.ALmax);

% simulation loop
for i=2:numIterations
    %loop through every cell
    
    nextGrid = extGridList{i - 1};
    extGrid = extGridList{i - 1};%safe copy?
    for x = 1:m
        for y = 1:n
            neighbors = radialNeighbors(x + centerDistance,y + centerDistance, extGrid);
            neighborTrees = findAllNeighborTrees(neighbors);
            forest_cell = extGrid(x + centerDistance, y + centerDistance);
            %for each tree type t that is not in forest(x,y) if
            %ALmini<=AL<=ALmaxi add tree t
            for t = 1:length(forest_cell.trees)
                tree = forest_cell.trees(t);
                AL = availableLight(tree, neighbors);
                if(forest_cell.hasTree(t))
                    %t is in cell
                    Dopt = optimalGrowth(tree);%calc opt diameter growth
                    %calc available light
                    BAR = totalBasalArea(neighborTrees);%calc basal area
                    %calc response to light & space availability as applicable
                    shade = shadeResponse(tree, AL);
                    space = spaceResponse(BAR);
                    %calc actual diameter growth
                    deltaD = Dopt * shade * space;
                    %check if tree dies due to chance
                    %check if tree dies due to competition
                    if shouldKillTree(tree, deltaD,rand(),rand())
                        %killTree
                        forest_cell.hasTree(t) = 0;
                    else
                        %update values
                        tree.D = tree.D + deltaD;
                        tree.H = 137 + tree.b2 * tree.D - tree.b3 * tree.D^2;
                        tree.LA = tree.C * tree.D^2;
                        tree.AGE = tree.AGE + 1;
                    end
                else%t is not in cell
                    %try to add new tree of type t
                    if shouldAddTree(forest_cell.trees(t), AL)
                        tree.D = tree.D + 1; %assumed one cm first year growth
                        tree.H = 137 + tree.b2 * tree.D - tree.b3 * tree.D^2;
                        tree.LA = tree.C * tree.D^2;
                        tree.AGE = tree.AGE + 1;
                        forest_cell.hasTree(t) = 1;
                    end%else t remains dead
                end
                forest_cell.trees(t) = tree;
            end
            nextGrid(x + centerDistance, y + centerDistance) = forest_cell;
        end
    end
    extGridList{i} = nextGrid;
end